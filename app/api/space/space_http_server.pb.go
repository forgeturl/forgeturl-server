// Code generated by protoc-gen-go-gin. DO NOT EDIT.
// versions:
// - protoc-gen-go-gin v1.0.3
// - protoc            v4.24.2
// source: api/proto/space.proto

package space

import (
	gin "github.com/gin-gonic/gin"
	api "github.com/sunmi-OS/gocore/v2/api"
)

// SpaceServiceHTTPServer is the server API for SpaceService service.
type SpaceServiceHTTPServer interface {
	GetUserInfo(*api.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	// 拉取我的空间 || 空间
	// 登录状态才能拉到自己的空间
	// 部分页面如果消失或者没权限了，需要自动移除
	GetMySpace(*api.Context, *GetMySpaceReq) (*GetMySpaceResp, error)
	// 创建页面 || 空间
	// 当getMySpace不存在自己的页面时，调用该接口创建自己的页面
	// 普通用户只能创建一个自己的页面
	// 未来氪金用户可以创建多个
	CreatePage(*api.Context, *CreatePageReq) (*CreatePageResp, error)
	// 更新页面 || 页面
	UpdatePage(*api.Context, *UpdatePageReq) (*UpdatePageResp, error)
	// 拉取某个页面数据 || 页面
	GetPage(*api.Context, *GetPageReq) (*GetPageResp, error)
	// 删除页面 || 页面
	DeletePage(*api.Context, *DeletePageReq) (*DeletePageResp, error)
	// 调整我的空间下面的页面顺序 || 空间
	// 如果有新增、删除page_id，也使用该方法
	// 保存结果会放到返回的page_ids中，也可以使用耗时多一些的getMySpace方法
	SavePageIds(*api.Context, *SavePageIdsReq) (*SavePageIdsResp, error)
	// (暂时废弃)创建临时页面 || 页面
	// 新：临时页面，能否只存在于浏览器本地？
	// 非登录状态可以创建临时页面，默认一个浏览器只能创建一个自己的临时页面
	// 创建完成后得到一个随机页面id(比如 240626-abcd)，不使用lo等字符串，只使用其他字母
	// 生成算法：当前时间转换的4个字母(时分秒)
	CreateTmpPage(*api.Context, *CreateTmpPageReq) (*CreateTmpPageResp, error)
	// 生成新页面链接 || 页面
	// 1.当前页面若是你的，则你可以创建 readonly edit admin链接
	// 2.如果你有该页面的adminId，则可以创建 readonly edit链接
	// 3. 其他情况会被拒绝
	// 4. 如果同样的链接已存在，则需要让用户RemoveLink后，再创建新的链接。避免用户以为，同一个页面可以存在多个链接。
	AddPageLink(*api.Context, *AddPageLinkReq) (*AddPageLinkResp, error)
	// 去除页面的某个链接 || 页面
	// 把页面的只读链接、编辑链接删除
	RemovePageLink(*api.Context, *RemovePageLinkReq) (*RemovePageLinkResp, error)
}

func RegisterSpaceServiceHTTPServer(s *gin.Engine, srv SpaceServiceHTTPServer) {
	r := s.Group("/")
	r.POST("/space/getUserInfo", _SpaceService_GetUserInfo_HTTP_Handler(srv))
	r.POST("/space/getMySpace", _SpaceService_GetMySpace_HTTP_Handler(srv))         // 拉取我的空间 || 空间
	r.POST("/space/createPage", _SpaceService_CreatePage_HTTP_Handler(srv))         // 创建页面 || 空间
	r.POST("/space/updatePage", _SpaceService_UpdatePage_HTTP_Handler(srv))         // 更新页面 || 页面
	r.POST("/space/getPage", _SpaceService_GetPage_HTTP_Handler(srv))               // 拉取某个页面数据 || 页面
	r.POST("/space/deletePage", _SpaceService_DeletePage_HTTP_Handler(srv))         // 删除页面 || 页面
	r.POST("/space/savePageIds", _SpaceService_SavePageIds_HTTP_Handler(srv))       // 调整我的空间下面的页面顺序 || 空间
	r.POST("/space/createTmpPage", _SpaceService_CreateTmpPage_HTTP_Handler(srv))   // (暂时废弃)创建临时页面 || 页面
	r.POST("/space/addPageLink", _SpaceService_AddPageLink_HTTP_Handler(srv))       // 生成新页面链接 || 页面
	r.POST("/space/removePageLink", _SpaceService_RemovePageLink_HTTP_Handler(srv)) // 去除页面的某个链接 || 页面
}

func _SpaceService_GetUserInfo_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetUserInfoReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.GetUserInfo(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_GetMySpace_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetMySpaceReq{}
		ctx := api.NewContext(g)
		resp, err := srv.GetMySpace(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_CreatePage_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &CreatePageReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.CreatePage(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_UpdatePage_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &UpdatePageReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.UpdatePage(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_GetPage_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &GetPageReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.GetPage(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_DeletePage_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &DeletePageReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.DeletePage(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_SavePageIds_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &SavePageIdsReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.SavePageIds(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_CreateTmpPage_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &CreateTmpPageReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.CreateTmpPage(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_AddPageLink_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &AddPageLinkReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.AddPageLink(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}

func _SpaceService_RemovePageLink_HTTP_Handler(srv SpaceServiceHTTPServer) func(g *gin.Context) {
	return func(g *gin.Context) {
		req := &RemovePageLinkReq{}
		var err error
		ctx := api.NewContext(g)
		err = parseReq(&ctx, req)
		err = checkValidate(err)
		if err != nil {
			setRetJSON(&ctx, nil, err)
			return
		}
		resp, err := srv.RemovePageLink(&ctx, req)
		setRetJSON(&ctx, resp, err)
	}
}
