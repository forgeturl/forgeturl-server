// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"forgeturl-server/dal/model"
)

func newUserPage(db *gorm.DB, opts ...gen.DOOption) userPage {
	_userPage := userPage{}

	_userPage.userPageDo.UseDB(db, opts...)
	_userPage.userPageDo.UseModel(&model.UserPage{})

	tableName := _userPage.userPageDo.TableName()
	_userPage.ALL = field.NewAsterisk(tableName)
	_userPage.ID = field.NewInt64(tableName, "id")
	_userPage.UID = field.NewInt64(tableName, "uid")
	_userPage.Pid = field.NewString(tableName, "pid")
	_userPage.Sort = field.NewInt64(tableName, "sort")
	_userPage.DeletedAt = field.NewField(tableName, "deleted_at")
	_userPage.CreatedAt = field.NewTime(tableName, "created_at")
	_userPage.UpdatedAt = field.NewTime(tableName, "updated_at")

	_userPage.fillFieldMap()

	return _userPage
}

type userPage struct {
	userPageDo userPageDo

	ALL       field.Asterisk
	ID        field.Int64  // auto increment ID
	UID       field.Int64  // user id
	Pid       field.String // origin page idï¼Œstart with O
	Sort      field.Int64  // sort order of page
	DeletedAt field.Field
	CreatedAt field.Time // create time
	UpdatedAt field.Time // update time

	fieldMap map[string]field.Expr
}

func (u userPage) Table(newTableName string) *userPage {
	u.userPageDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPage) As(alias string) *userPage {
	u.userPageDo.DO = *(u.userPageDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPage) updateTableName(table string) *userPage {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UID = field.NewInt64(table, "uid")
	u.Pid = field.NewString(table, "pid")
	u.Sort = field.NewInt64(table, "sort")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")

	u.fillFieldMap()

	return u
}

func (u *userPage) WithContext(ctx context.Context) *userPageDo { return u.userPageDo.WithContext(ctx) }

func (u userPage) TableName() string { return u.userPageDo.TableName() }

func (u userPage) Alias() string { return u.userPageDo.Alias() }

func (u userPage) Columns(cols ...field.Expr) gen.Columns { return u.userPageDo.Columns(cols...) }

func (u *userPage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPage) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["uid"] = u.UID
	u.fieldMap["pid"] = u.Pid
	u.fieldMap["sort"] = u.Sort
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
}

func (u userPage) clone(db *gorm.DB) userPage {
	u.userPageDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPage) replaceDB(db *gorm.DB) userPage {
	u.userPageDo.ReplaceDB(db)
	return u
}

type userPageDo struct{ gen.DO }

func (u userPageDo) Debug() *userPageDo {
	return u.withDO(u.DO.Debug())
}

func (u userPageDo) WithContext(ctx context.Context) *userPageDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPageDo) ReadDB() *userPageDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPageDo) WriteDB() *userPageDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPageDo) Session(config *gorm.Session) *userPageDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPageDo) Clauses(conds ...clause.Expression) *userPageDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPageDo) Returning(value interface{}, columns ...string) *userPageDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPageDo) Not(conds ...gen.Condition) *userPageDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPageDo) Or(conds ...gen.Condition) *userPageDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPageDo) Select(conds ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPageDo) Where(conds ...gen.Condition) *userPageDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPageDo) Order(conds ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPageDo) Distinct(cols ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPageDo) Omit(cols ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPageDo) Join(table schema.Tabler, on ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userPageDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPageDo) RightJoin(table schema.Tabler, on ...field.Expr) *userPageDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPageDo) Group(cols ...field.Expr) *userPageDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPageDo) Having(conds ...gen.Condition) *userPageDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPageDo) Limit(limit int) *userPageDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPageDo) Offset(offset int) *userPageDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userPageDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPageDo) Unscoped() *userPageDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPageDo) Create(values ...*model.UserPage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPageDo) CreateInBatches(values []*model.UserPage, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPageDo) Save(values ...*model.UserPage) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPageDo) First() (*model.UserPage, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPage), nil
	}
}

func (u userPageDo) Take() (*model.UserPage, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPage), nil
	}
}

func (u userPageDo) Last() (*model.UserPage, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPage), nil
	}
}

func (u userPageDo) Find() ([]*model.UserPage, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserPage), err
}

func (u userPageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserPage, err error) {
	buf := make([]*model.UserPage, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPageDo) FindInBatches(result *[]*model.UserPage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPageDo) Attrs(attrs ...field.AssignExpr) *userPageDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPageDo) Assign(attrs ...field.AssignExpr) *userPageDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPageDo) Joins(fields ...field.RelationField) *userPageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPageDo) Preload(fields ...field.RelationField) *userPageDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPageDo) FirstOrInit() (*model.UserPage, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPage), nil
	}
}

func (u userPageDo) FirstOrCreate() (*model.UserPage, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserPage), nil
	}
}

func (u userPageDo) FindByPage(offset int, limit int) (result []*model.UserPage, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPageDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPageDo) Delete(models ...*model.UserPage) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPageDo) withDO(do gen.Dao) *userPageDo {
	u.DO = *do.(*gen.DO)
	return u
}
