name: Deploy and Rollback

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      action:
        description: "选择要执行的操作"
        required: true
        default: "rollback"
        type: choice
        options:
          - rollback
      target:
        description: "回滚到哪个版本目录 (blue 或 green)"
        required: false
        default: "blue"
        type: choice
        options:
          - blue
          - green

jobs:
  # =============================
  # 部署到测试环境
  # =============================
  deploy-test:
    if: github.event_name == 'push'
    name: Deploy to Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: app/go.mod
          cache: true

      - name: Build Go binary
        run: |
          cd app
          go mod download
          mkdir -p ../bin
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../bin/forgeturl-server .
          file ../bin/forgeturl-server || true

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ECS_KEY }}

      - name: Add ECS host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.ECS_HOST }} >> ~/.ssh/known_hosts
          
      - name: Debug SSH Configuration
        run: |
          echo "=== SSH Debug Information ==="
          echo "SSH Agent PID: $SSH_AGENT_PID"
          echo "SSH Auth Sock: $SSH_AUTH_SOCK"
          echo "Available SSH keys:"
          ssh-add -l || echo "No keys found in ssh-agent"
          echo ""
          echo "SSH Client Version:"
          ssh -V
          echo ""
          echo "Testing SSH connection with verbose output:"
          ssh -vvv -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o BatchMode=yes ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "echo 'SSH connection test successful'" 2>&1 | head -50 || echo "SSH connection failed"

      - name: Prepare Server Environment
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          # 检查并安装 rsync
          echo "Checking rsync on server..."
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            if ! command -v rsync &> /dev/null; then
              echo 'rsync not found, installing...'
              sudo apt-get update -qq
              sudo apt-get install -y rsync
              echo 'rsync installed successfully'
            else
              echo 'rsync already installed'
            fi
            rsync --version | head -1
          "

      - name: Deploy to Test Environment
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          echo "Uploading Go binary to test environment..."
          rsync -avz ./bin/forgeturl-server ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }}:/data/app/forgeturl-server/test/main/
          
          echo "Restarting test service..."
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            sudo systemctl restart forgeturl-server-test.service
            sleep 2
            sudo systemctl status forgeturl-server-test.service --no-pager
          "
          
          echo "✅ Test environment deployed at /data/app/forgeturl-server/test/main"

  # =============================
  # 部署到生产环境 (蓝绿发布)
  # =============================
  deploy-prod:
    if: github.event_name == 'push'
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: deploy-test

    steps:
      - name: Wait for manual approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: your-github-username
          minimum-approvals: 1
          issue-title: "Approve deploy to production (blue-green)"
          issue-body: "请确认测试环境无误后，批准发布到生产环境。"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: app/go.mod
          cache: true

      - name: Build Go binary
        run: |
          cd app
          go mod download
          mkdir -p ../bin
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ../bin/forgeturl-server .
          file ../bin/forgeturl-server || true

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ECS_KEY }}

      - name: Add ECS host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.ECS_HOST }} >> ~/.ssh/known_hosts
          
      - name: Prepare Production Server Environment
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          # 检查并安装 rsync（如果需要）
          echo "Checking rsync on production server..."
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            if ! command -v rsync &> /dev/null; then
              echo 'rsync not found, installing...'
              sudo apt-get update -qq
              sudo apt-get install -y rsync
              echo 'rsync installed successfully'
            else
              echo 'rsync already available'
            fi
            echo 'SSH connection test successful'
          "

      - name: Blue-Green Deployment
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          # 确定目标部署目录
          TARGET_DIR=$(ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            set -e
            APP_DIR=/data/app/forgeturl-server/prod
            BLUE=\$APP_DIR/main-blue
            GREEN=\$APP_DIR/main-green
            CURRENT=\$(readlink \$APP_DIR/main || echo \"\")

            if [ \"\$CURRENT\" = \"\$BLUE\" ]; then
              echo \$GREEN
            else
              echo \$BLUE
            fi
          ")
          
          echo "Deploying to $TARGET_DIR..."
          
          # 同步代码到目标目录
          rsync -avz ./bin/forgeturl-server ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }}:$TARGET_DIR/

          
          # 切换软链接并重启服务
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            set -e
            APP_DIR=/data/app/forgeturl-server/prod
            
            echo \"Switching symlink to $TARGET_DIR...\"
            ln -sfn $TARGET_DIR \$APP_DIR/main
            
            echo \"Restarting service...\"
            sudo systemctl restart forgeturl-server-prod.service
            sleep 2
            sudo systemctl status forgeturl-server-prod.service --no-pager
            
            echo \"✅ Deployment complete. Now running from $TARGET_DIR\"
          "

  # =============================
  # 手动触发回滚
  # =============================
  rollback:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    name: Rollback to Selected Version
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ECS_KEY }}

      - name: Add ECS host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.ECS_HOST }} >> ~/.ssh/known_hosts

      - name: Detect Current Version
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            APP_DIR=/data/app/forgeturl-server/prod
            CURRENT=\$(readlink \$APP_DIR/main || echo \"none\")
            echo \"🔎 当前生产环境运行版本: \$CURRENT\"
          "

      - name: Rollback Deployment
        run: |
          # 设置环境变量避免 tput 警告
          export TERM=xterm-256color
          
          ssh ${{ secrets.ECS_USER }}@${{ secrets.ECS_HOST }} "
            export TERM=xterm-256color
            set -e
            APP_DIR=/data/app/forgeturl-server/prod
            TARGET_DIR=\$APP_DIR/main-${{ github.event.inputs.target }}

            if [ ! -d \$TARGET_DIR ]; then
              echo '❌ 目标目录不存在: \$TARGET_DIR'
              exit 1
            fi

            echo '🔄 切换软链到: \$TARGET_DIR'
            ln -sfn \$TARGET_DIR \$APP_DIR/main

            echo '🚀 重启服务...'
            sudo systemctl restart forgeturl-server-prod.service
            sleep 2
            sudo systemctl status forgeturl-server-prod.service --no-pager

            echo '✅ 回滚完成，现在运行于: \$TARGET_DIR'
          "
